class Solution:
    # graph with dfs
    # TC : O(n**2)
    # SC : O(n)
    def dfs(self,graph: List[List[int]],u:int):
        if self.colors[u] != -1:
            return
        self.colors[u] = self.color
        for i in range(len(graph)):
            if graph[u][i] == 1:
                self.dfs(graph,i)

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if graph is None or initial is None:
            return 0
        n = len(graph)
        self.colors = [-1]*n
        self.color = 0
        
        for i in range(n):
            if self.colors[i] == -1:
                self.dfs(graph,i)
                self.color += 1
        
        groups = [0]*self.color
        for i in range(len(self.colors)):
            groups[self.colors[i]] += 1
        totalinfected = [0]*self.color
        
        for i in range(len(initial)):
            group = self.colors[initial[i]]
            totalinfected[group] += 1
        
        answer = -1
        for i in range(len(initial)):
            group = self.colors[initial[i]]
            if totalinfected[group] == 1:
                if answer == -1:
                    answer = initial[i]
                elif  groups[group] > groups[self.colors[answer]] :
                    answer = initial[i]
                elif groups[group] == groups[self.colors[answer]] and answer > initial[i]:
                    answer = initial[i]
        print(answer)
        if answer == -1:
            minv = float('inf')
            for i in range(len(initial)):
                minv = min(minv,initial[i])
                print(minv)
            return minv
        return answer if answer != -1 else 0
            
                    



        

